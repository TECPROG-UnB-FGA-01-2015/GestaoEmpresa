/**********************************************************
 * File: ProductDataView.java
 * Purpose: Responsible to get Products' informations from user
**********************************************************/
package view;

import controller.StockController;

import java.util.ArrayList;

import javax.swing.JOptionPane;

import org.apache.log4j.Logger;

import model.Product;
import static view.StockView.newProduct;

@SuppressWarnings("serial")
public class ProductDataView extends javax.swing.JFrame
{
	// Variables declaration of Buttons, Labels and TextFields
    private javax.swing.JButton jButton_Cancelar; // Button that exits New Product Screen
    private javax.swing.JButton jButton_SalvarProduto; // Button that saves and adds a New Product on the system
    private javax.swing.JLabel jLabel1; // Shows the "Code" word on the Screen 
    private javax.swing.JLabel jLabel2; // Shows the "Description" word on the Screen 
    private javax.swing.JLabel jLabel3; // Shows the "Selling Price" word on the Screen 
    private javax.swing.JLabel jLabel4; // Shows the "Quantity" word on the Screen 
    private javax.swing.JLabel jLabel5; // Shows the "New Product" word on the Top Screen 
    private javax.swing.JLabel jLabel6; // Shows the "R$" symbol (Brazilian Currency) on the Screen from the Selling Price
    private javax.swing.JLabel jLabel7; // Shows the "Buying Price" word on the Screen 
    private javax.swing.JLabel jLabel8; // Shows the "R$" symbol (Brazilian Currency) on the Screen from the Buying Price
    private javax.swing.JPanel jPanel1; // Shows the entire "New Product" Screen Layout
    private javax.swing.JTextField jTextField_DescricaoProduto; // Shows the product's description
    private javax.swing.JTextField jTextField_NomeProduto; // Shows the product's name
    private javax.swing.JTextField jTextField_PrecoCompra; // Shows the buying price
    private javax.swing.JTextField jTextField_PrecoVenda; // Shows the selling price 
    private javax.swing.JTextField jTextField_QuantidadeProduto; // Shows the product's quantity
    
    Product objectProduct; // Product type object
    static StockController objectStockController = new StockController(); // StockController type object
    Product editProduct; // Product type object that is being editing
    StockView stockView; // Control the view visibility situation
    static boolean loadInfo=false; // Boolean to disposes the informations on view
    static Logger log = Logger.getLogger(ProductDataView.class.getName());

    
    // Constructor to initialize components on ProductDataView
    public ProductDataView() throws Exception
    {
        initComponents();
        fillFields();
        log.debug("Load ProductDataView");
        jTextField_QuantidadeProduto.setEnabled(false);
        fillCode();
        jTextField_DescricaoProduto.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents()
    {
        jPanel1 = new javax.swing.JPanel();
        jButton_Cancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField_NomeProduto = new javax.swing.JTextField();
        jTextField_DescricaoProduto = new javax.swing.JTextField();
        jTextField_PrecoCompra = new javax.swing.JTextField();
        jTextField_QuantidadeProduto = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton_SalvarProduto = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField_PrecoVenda = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Novo Produto");
        setBounds(new java.awt.Rectangle(450, 300, 0, 0));

        jButton_Cancelar.setText("Sair");
        jButton_Cancelar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
            	try
            	{
                    jButton_CancelarActionPerformed(evt);
            	}
            	catch (Exception e)
            	{
            		e.printStackTrace();
            	}
           }
        });

        jLabel1.setText("Código:");

        jTextField_PrecoCompra.setText("0.00");

        jTextField_QuantidadeProduto.setText("0.0");

        jLabel2.setText("Descrição:");

        jLabel3.setText("Preço Venda:");

        jLabel4.setText("Quantidade:");

        jButton_SalvarProduto.setText("Salvar");
        jButton_SalvarProduto.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
            	try
            	{
                    jButton_SalvarProdutoActionPerformed(evt);
            	}
            	catch (Exception e)
            	{
            		e.printStackTrace();
            	}
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel5.setText("Novo Produto");

        jLabel6.setText("R$");

        jLabel7.setText("Preço Compra:");

        jLabel8.setText("R$");

        jTextField_PrecoVenda.setText("0.00");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton_Cancelar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(0, 56, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton_SalvarProduto)
                .addGap(107, 107, 107))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField_PrecoCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField_PrecoVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jTextField_NomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_QuantidadeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_DescricaoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_Cancelar)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField_NomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_DescricaoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jTextField_PrecoCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(jTextField_PrecoVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField_QuantidadeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(jButton_SalvarProduto))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }

    // Method to show a message to user by passing as a parameter a String info
    public void showMessage(String info)
    {
        JOptionPane.showMessageDialog(this, info,"Atenção" ,JOptionPane.INFORMATION_MESSAGE);
    }
    
    // Method to add informations on the Product list
    private void fillCode() throws Exception
    {
    	try
    	{
    		if(newProduct == true)
    		{
	        	// Variable to receive a list of Products
	            ArrayList<Product> productList = objectStockController.getProductList();
	            
	            if(productList.isEmpty())
	            {
	                jTextField_NomeProduto.setText("1");
	                log.info("Put first Product code with number 1");
	            }
	            else
	            {
	            	int sizeProductList = productList.size();
	            	Product newProduct = productList.get(sizeProductList - 1);
	            	String codeNewProduct = newProduct.getCode();
	            	int intCodeNewProduct = Integer.parseInt(codeNewProduct);
	            	String nameProduct = Integer.toString(intCodeNewProduct + 1);
	                jTextField_NomeProduto.setText(nameProduct);
	                log.info("Product code number " + codeNewProduct + " was added successfuly!");
	            }
    		}   
	        else
	        {
	        	// Nothing to do
	        }
    	}
    	catch(Exception e)
    	{
    		log.error("It wasn't possible to add Product list' info . Exception: ", e);
    		throw e;
    	}
    }
    
    // Method to add one more on the attribute code if there is already a Product
    private void fillFields() throws Exception
    {
    	try
    	{
    		if(newProduct == false)
    		{
    			editProduct = objectStockController.searchProduct(StockView.codeTable,false);
	        
		        String productCode = editProduct.getCode();
		        jTextField_NomeProduto.setText(productCode);
		        
		        String productDescription = editProduct.getDescription();
		        jTextField_DescricaoProduto.setText(productDescription);
		        
		        double productPurchasePrice = editProduct.getPurchasePrice();
		        String strProductPurchasePrice = Double.toString(productPurchasePrice);
		        jTextField_PrecoCompra.setText(strProductPurchasePrice);
		        
		        double productSellingPrice = editProduct.getSellingPrice();
		        String strProductSellingPrice = Double.toString(productSellingPrice);
		        jTextField_PrecoVenda.setText(strProductSellingPrice);
	
		        double productQuantity = editProduct.getQuantity();
		        String strProductQuantity = Double.toString(productQuantity);
		        jTextField_QuantidadeProduto.setText(strProductQuantity);
    		}
	        else
	        {
	        	// Nothing to do
	        }
	    }
	    catch(Exception e)
	    {
	    	log.error("It wasn't possible to fill Product list' fields. Exception: ", e);
	    	throw e;
	    }
    }
    
    // Method to clean up the textBox
    private void cleanFields() throws Exception
    {
    	try
    	{
	        jTextField_NomeProduto.setText("");
	        jTextField_DescricaoProduto.setText("");
	        jTextField_PrecoCompra.setText("0.00");
	        jTextField_PrecoVenda.setText("0.00");
	        jTextField_QuantidadeProduto.setText("0.0");
	        log.info("Clean product, buying price and selling price fields");
    	}
    	catch(Exception e)
    	{
    		log.error("It wasn't possible to clean Product list' fields. Exception: ", e);
    		throw e;
    	}
    }
    
    /* Method to cancel the action to add another product giving returning an
     * information to user
     */
    private void jButton_CancelarActionPerformed(java.awt.event.ActionEvent evt) throws Exception
    {
    	try
    	{
	        if(!jTextField_DescricaoProduto.getText().equals(""))
	        {
	            showMessage("Product não adicionado");
	            log.info("Product wasn't added!");
	        }
	        else
	        {
		        new StockView().setVisible(true);
		        log.info("Exit ProductDataView");
		        this.dispose();
		        loadInfo=true;
	        }
    	}
    	catch(Exception e)
    	{
    		log.error("It wasn't possible to exit ProductDataView. Exception: ", e);
    		throw e;
    	}
    }

    /* Method to save all the informations provided by the user on a new object
     * Product
     */
    private void jButton_SalvarProdutoActionPerformed(java.awt.event.ActionEvent evt) throws Exception 
    {
    	try
    	{
	    	String productName = jTextField_NomeProduto.getText();
	    	boolean emptyProductName = productName.equals("");
	    	
	    	String productDescription = jTextField_DescricaoProduto.getText();
	    	boolean emptyProductDescription = productDescription.equals("");
	    	
	    	String productPurchasePrice = jTextField_PrecoCompra.getText();
	    	boolean emptyProductPurchasePrice = productPurchasePrice.equals("");
	    	
	        if(!emptyProductName && !emptyProductDescription && !emptyProductPurchasePrice)
	        {
	            String code = jTextField_NomeProduto.getText();
	            String description = jTextField_DescricaoProduto.getText();
	            double purchasePrice = Double.parseDouble(jTextField_PrecoCompra.getText());
	            double sellingPrice = Double.parseDouble(jTextField_PrecoVenda.getText());
	            double quantity = Double.parseDouble(jTextField_QuantidadeProduto.getText());
	
	            if(StockView.newProduct == true)
	            {
	                objectProduct = new Product(code, description, purchasePrice, quantity, sellingPrice);
	                
	                String listProductCode = objectProduct.getCode();
	                Product returnProduct = objectStockController.searchProduct(listProductCode, false);
	                
	                String listProductDescription = objectProduct.getDescription();
	                Product returnDescription = objectStockController.searchProduct(listProductDescription, false);
	                
	                if(returnProduct == null && returnDescription == null)
	                {
	                    objectStockController.addProduct(objectProduct);
	                    showMessage("Produto Adicionado!");
	                    log.info("Product '" + listProductDescription + "' added successfully!");
	                }
	                else if(returnProduct != null)
	                {
	                    showMessage("Produto com esse código já existente no estoque!");
	                    log.info("Product code '" + listProductDescription + "' already exists!");
	                }
	                else if(returnDescription != null)
	                {
	                    showMessage("Produto com essa Descrição já existente no estoque!");
	                    log.info("Product name '" + listProductDescription + "' already exists!");	              
	                }
	                else
	                {
	                	// Nothing to do
	                }
	            }
	            else if(StockView.newProduct == false)
	            {    
	            	String editProductCode = editProduct.getCode();
	            	boolean changedEditProductCode = editProductCode.equals(code);
	                if(!changedEditProductCode)
	                {
	                    showMessage("Não é permitido a alteração do código do produto!");
	                    log.info("Product code can't be edited!");
	                }
	                else
	                {
	                    editProduct.setCode(code);
	                    editProduct.setDescription(description);
	                    editProduct.setPurchasePrice(purchasePrice);
	                    editProduct.setSellingPrice(sellingPrice);
	                    editProduct.setQuantity(quantity);   
	                    showMessage("Produto Editado!");
	                    log.info("Product edited!");
	                }
	            }
	            else
	            {
	            	// Nothing to do
	            }
	            
	            cleanFields();
	            fillCode();
	            newProduct = true;
	        }
	        
	        else if(jTextField_NomeProduto.getText().equals(""))
	        {
	            showMessage("Digite um código para o produto");
	            jTextField_NomeProduto.requestFocus();
	        }
	        
	        else if(jTextField_DescricaoProduto.getText().equals(""))
	        {
	            showMessage("Digite uma descrição para o produto");
	            jTextField_DescricaoProduto.requestFocus();
	            log.warn("Product description is empty!");
	        }
	        
	        else if(jTextField_PrecoCompra.getText().equals(""))
	        {
	            showMessage("Digite um preço de compra para o produto");
	            jTextField_PrecoCompra.requestFocus();
	            log.warn("Product buying price is empty!");
	
	        }
	        
	        else if(jTextField_PrecoVenda.getText().equals(""))
	        {
	            showMessage("Digite um preço de venda para o produto");
	            jTextField_PrecoCompra.requestFocus();
	            log.warn("Product selling price is empty!");
	        }
	        
	        else
	        {
	        	// Nothing to do
	        }
    	}
    	catch(Exception e)
    	{
    		log.error("It wasn't possible to save Product. Exception: ", e);
    		throw e;
    	}
    }	

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
    	try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
                else
                {
                	// Nothing to do
                }
            }
        }
    	catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ProductDataView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            log.error("ClassNotFoundException: ", ex);
        }
        
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ProductDataView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            log.error("InstantiationException: ", ex);
        }
        
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ProductDataView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            log.error("IllegalAccessException: ", ex);
        }
        
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ProductDataView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            log.error("UnsupportedLookAndFeelException: ", ex);
        }
     
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
            	try
            	{
            		new ProductDataView().setVisible(true);
            	}
            	catch(Exception e)
            	{
            		log.error("Error when running ProductDataView. Exception: ", e);
            		try
					{
						throw e;
					}
					catch (Exception e1)
					{
						// TODO Auto-generated catch block
						e1.printStackTrace();
					} 
            	}
            }
        });
    } 
}
